<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ion</title>
    <link>https://pionion.org/</link>
    <description>Recent content on ion</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://pionion.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Architecture</title>
      <link>https://pionion.org/develop/arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/develop/arch/</guid>
      <description>before develop modules, you should know how it works
1. Architecture 2. Signal flow SDK&amp;lt;---grpc---&amp;gt;BIZ&amp;lt;---mq---&amp;gt;ISLB&amp;lt;---mq---&amp;gt;BIZ&amp;lt;---grpc---&amp;gt;SDK | | | |----------&amp;gt;Redis&amp;lt;---------|  SDK send signals to BIZ by grpc (example:join/negotiate and so on) BIZ do business handle and send signals/events to BIZ/ISLB by nats BIZ get a SFU node from ISLB when SDK join a session BIZ exchange SDP with SFU by nats SDK and SFU start ICE, send/recv video streams after ICE state is connected Other BIZ will receive events at the same time(example:some one joined/publish stream)  3.</description>
    </item>
    
    <item>
      <title>1. From Docker</title>
      <link>https://pionion.org/quickstart/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/quickstart/docker/</guid>
      <description>Docker  1. Create network Docker commands require the ionnet docker network
First run:
docker network create ionnet 2. Deployment 1. Clone git clone https://github.com/pion/ion 2. Setup Firstly pull images. Skip this command if you want build images locally
docker-compose pull 3. Run docker-compose up 4. Expose Ports (Skip if only exposing locally)
Ensure the following ports are exposed or forwarded. You can find them in *.toml
15000-15200/udp Tips: max clients=port-range/2</description>
    </item>
    
    <item>
      <title>1. ion-islb</title>
      <link>https://pionion.org/backend/islb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/backend/islb/</guid>
      <description>☕️How to use 1. Build and run by docker  1. run Nats and Redis docker pull nats docker run -p 4222:4222 -p 6222:6222 -p 8222:8222 nats docker pull redis docker run -p 6379:6379 redis check nats and redis is running
lsof -i:4222 lsof -i:6379 2. build ion-islb docker build -f ./docker/islb.Dockerfile -t pionwebrtc/ion:latest-islb . 3. run ion-islb docker run -p -p 6061:6061/tcp --network host -v $PWD/configs/islb.toml:/configs/islb.toml pionwebrtc/ion:latest-islb 2. Build and run with source code  tips:</description>
    </item>
    
    <item>
      <title>1. ion-sdk-js</title>
      <link>https://pionion.org/frontend/ion-sdk-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/frontend/ion-sdk-js/</guid>
      <description>How to use https://github.com/pion/ion-sdk-js
1. Installation npm install ion-sdk-js 2. Usage import { Client, LocalStream, RemoteStream } from &#39;ion-sdk-js&#39;; import { IonSFUJSONRPCSignal } from &#39;ion-sdk-js/lib/signal/json-rpc-impl&#39;; const signal = new IonSFUJSONRPCSignal(&amp;quot;wss://ion-sfu:7000&amp;quot;); const client = new Client(signal); signal.onopen = () =&amp;gt; client.join(&amp;quot;test session&amp;quot;, &amp;quot;test uid&amp;quot;) // Setup handlers client.ontrack = (track: MediaStreamTrack, stream: RemoteStream) =&amp;gt; { // mute a remote stream stream.mute() // unmute a remote stream stream.unmute() if (track.kind === &amp;quot;video&amp;quot;) { // prefer a layer stream.</description>
    </item>
    
    <item>
      <title>2. back-end</title>
      <link>https://pionion.org/develop/backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/develop/backend/</guid>
      <description>This show how to do develop ion-biz Other services are similar
1. Main The main func did these things:
 parse command line params init modules register grpc services start server  cmd/biz/main.go 2. Real business handle The main business logic is here:
pkg/node/biz/server.go  room and peer management signal handle like: join/leave and so on exchange signal with other module/service by grpc/nats  3. Add/Modify your code 4. Build go build -o bin/biz cmd/biz/*.</description>
    </item>
    
    <item>
      <title>2. From Scripts</title>
      <link>https://pionion.org/quickstart/scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/quickstart/scripts/</guid>
      <description>1. Install Deps ./scripts/deps_inst It will install all depend modules, support mac, ubuntu, centos Check these modules installed:nats-server redis
2. Run deps ./scripts/deps start redis ./scripts/deps start nats-server Check redis and nats-server running
On mac and linux, use ps:
ps -ef|grep -E &amp;quot;redis|nats&amp;quot; 3. Run all services First time:
./scripts/all start It will start all services we need
Next time:
./scripts/all restart It will restart all services we need
4. Test Test by ion-app-web or ion-app-flutter</description>
    </item>
    
    <item>
      <title>2. ion-biz</title>
      <link>https://pionion.org/backend/biz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/backend/biz/</guid>
      <description>☕️How to use 1. Build and run by docker  1. run Nats and Redis docker pull nats docker run -p 4222:4222 -p 6222:6222 -p 8222:8222 nats docker pull redis docker run -p 6379:6379 redis check nats and redis is running
lsof -i:4222 lsof -i:6379 2. build ion-biz docker build -f ./docker/biz.Dockerfile -t pionwebrtc/ion:latest-biz . 3. run ion-biz docker run -p 5551:5551/tcp -p 6060:6060/tcp --network host -v $PWD/configs/biz.toml:/configs/biz.toml pionwebrtc/ion:latest-biz 2. Build and run with source code  tips:</description>
    </item>
    
    <item>
      <title>2. ion-sdk-flutter</title>
      <link>https://pionion.org/frontend/ion-sdk-flutter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/frontend/ion-sdk-flutter/</guid>
      <description>☕️How to use </description>
    </item>
    
    <item>
      <title>3. ion-sdk-js</title>
      <link>https://pionion.org/develop/ion-sdk-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/develop/ion-sdk-js/</guid>
      <description>This page show how to develop ion-sdk-js
1. Install nodeJS and npm https://nodejs.org
2. Add/Modify code The main code is here
ion-sdk-js/src written by TS
4. Build cd ion-sdk-js npm i you will see new sdk in:
ion-sdk-js/dist 5. Test with html import your new sdk to your web app (for example: pubsubtest)
modify these lines:
 &amp;lt;script src=&amp;quot;yoursdkpath/ion-sdk-js/dist/ion-sdk.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;yoursdkpath/ion-sdk-js/dist/json-rpc.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; tips:replace yoursdkpath with real path
run this web app with chrome and test</description>
    </item>
    
    <item>
      <title>3. ion-sfu</title>
      <link>https://pionion.org/backend/sfu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/backend/sfu/</guid>
      <description>Features  High performance Two-PC per peer(O(n) port usage) Less signal exchange (some through datachannel) Unified plan semantics Audio/Video/Datachannel forwarding BWE(TWCC, REMB, RR/SR) ARQ(PLI, NACK) Simulcast  ☕️How to use 1. Build and run by docker  1. run Nats docker pull nats docker run -p 4222:4222 -p 6222:6222 -p 8222:8222 nats check nats and redis is running
lsof -i:4222 2. build ion-sfu docker build -f ./docker/sfu.Dockerfile -t pionwebrtc/ion:latest-sfu . 3.</description>
    </item>
    
    <item>
      <title>4. ion-app-flutter</title>
      <link>https://pionion.org/frontend/ion-app-flutter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/frontend/ion-app-flutter/</guid>
      <description>☕️How to use </description>
    </item>
    
    <item>
      <title>4. ion-app-web</title>
      <link>https://pionion.org/frontend/ion-app-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/frontend/ion-app-web/</guid>
      <description>☕️How to use ion-app-web ion web app
Local Dev Setup Install node modules
cd ion-app-web npm i Run Make sure ion server is running.
Start dev server
npm start Serves on http://localhost:8080</description>
    </item>
    
    <item>
      <title>4. ion-avp</title>
      <link>https://pionion.org/backend/avp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/backend/avp/</guid>
      <description>☕️How to use 1. Build and run by docker  1. run Nats docker pull nats docker run -p 4222:4222 -p 6222:6222 -p 8222:8222 nats check nats is running
lsof -i:4222 2. build ion-avp docker build -f ./docker/avp.Dockerfile -t pionwebrtc/ion:latest-avp . 3. run ion-avp docker run -p -p 6063:6063/tcp --network host -v $PWD/configs/avp.toml:/configs/avp.toml pionwebrtc/ion:latest-avp 2. Build and run with source code  tips:
 script support ubuntu/mac/centos, you can build|start them yourself if you are using windows or IDE script will start a daemon, save pid to .</description>
    </item>
    
    <item>
      <title>4. load-testing</title>
      <link>https://pionion.org/develop/load-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pionion.org/develop/load-testing/</guid>
      <description>This show how to do load-testing about https://github.com/pion/ion-sfu
1. Prepare  Two High performance server(cpu not shared)  Server A Server B    2. Build and run ion-sfu  SSH login A Build and run ion-sfu(allrpc version)  3. Build and run ion-load-tool  SSH login B Build and run ion-load-tool(https://github.com/pion/ion-sdk-go in example)  4. record cpu/mem usage and clients/bandwidths  using dstat to see cpu/mem usage use ion-load-tool to see clients/bandwidths  .</description>
    </item>
    
  </channel>
</rss>
