<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ion</title><link>https://pionion.org/</link><description>Recent content on ion</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pionion.org/index.xml" rel="self" type="application/rss+xml"/><item><title>1. From Docker</title><link>https://pionion.org/quickstart/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pionion.org/quickstart/docker/</guid><description>Docker How to use Docker commands require the ionnet docker network
First run:
docker network create ionnet Deployment 1. Clone git clone https://github.com/pion/ion 2. Setup Firstly pull images. Skip this command if you want build images locally
docker-compose pull 3. Run docker-compose up 4. Expose Ports (Skip if only exposing locally)
Ensure the following ports are exposed or forwarded. You can find them in *.toml
5000-5200/udp 5. Chat Head over to Ion Web App to bring up the front end.</description></item><item><title>1. ion-biz</title><link>https://pionion.org/backend/biz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pionion.org/backend/biz/</guid><description>☕️How to use 1. Build and run by docker 1. run Nats and Redis docker pull nats docker run -p 4222:4222 -p 6222:6222 -p 8222:8222 nats docker pull redis:6.0.9 nats docker run -p 6379:6379 redis:6.0.9 check nats and redis is running
lsof -i:4222 lsof -i:6379 2. build ion-biz docker build -f ./docker/biz.Dockerfile -t pionwebrtc/ion:latest-biz . 3. run ion-biz docker run -p 5551:5551/tcp -p 6060:6060/tcp --network host -v $PWD/configs/biz.toml:/configs/biz.toml pionwebrtc/ion:latest-biz 2.</description></item><item><title>1. ion-sdk-flutter</title><link>https://pionion.org/frontend/ion-sdk-flutter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pionion.org/frontend/ion-sdk-flutter/</guid><description>Quick Start ☕️Running the grpc signaling server If you have a local golang environment already setup, simply run
go build ./cmd/signal/grpc/main.go &amp;amp;&amp;amp; ./main -c config.toml If you prefer a containerized environment, you can use the included Docker image
docker run -p 50051:50051 -p 5000-5020:5000-5020/udp pionwebrtc/ion-sfu:latest-grpc</description></item><item><title>2. From Scripts</title><link>https://pionion.org/quickstart/scripts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pionion.org/quickstart/scripts/</guid><description>1. Install Deps ./scripts/installDeps.sh It will install all depend modules, support mac, ubuntu, centos Check these modules installed:nats-server redis
2. Make Key ./scripts/makeKey.sh It will generate key files to configs
3. Run First Time
./scripts/allStart.sh It will start all services we need
./scripts/allStop.sh It will stop all services
./scripts/allRestart.sh It will restart all services we need
There is also individual module script in scripts folder, you can use them when you debug individual module</description></item><item><title>2. ion-islb</title><link>https://pionion.org/backend/islb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pionion.org/backend/islb/</guid><description>☕️How to use 1. Build and run by docker 1. run Nats and Redis docker pull nats docker run -p 4222:4222 -p 6222:6222 -p 8222:8222 nats docker pull redis:6.0.9 nats docker run -p 6379:6379 redis:6.0.9 check nats and redis is running
lsof -i:4222 lsof -i:6379 2. build ion-islb docker build -f ./docker/islb.Dockerfile -t pionwebrtc/ion:latest-islb . 3. run ion-islb docker run -p -p 6061:6061/tcp --network host -v $PWD/configs/islb.toml:/configs/islb.toml pionwebrtc/ion:latest-islb 2. Build and run with source code tips:</description></item><item><title>2. ion-sdk-js</title><link>https://pionion.org/frontend/ion-sdk-js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pionion.org/frontend/ion-sdk-js/</guid><description>How to use https://github.com/pion/ion-sdk-js
1. Installation npm install ion-sdk-js 2. Usage import { Client, LocalStream, RemoteStream } from 'ion-sdk-js'; import { IonSFUJSONRPCSignal } from 'ion-sdk-js/lib/signal/json-rpc-impl'; const signal = new IonSFUJSONRPCSignal(&amp;quot;wss://ion-sfu:7000&amp;quot;); const client = new Client(signal); signal.onopen = () =&amp;gt; client.join(&amp;quot;test session&amp;quot;, &amp;quot;test uid&amp;quot;) // Setup handlers client.ontrack = (track: MediaStreamTrack, stream: RemoteStream) =&amp;gt; { // mute a remote stream stream.mute() // unmute a remote stream stream.unmute() if (track.kind === &amp;quot;video&amp;quot;) { // prefer a layer stream.</description></item><item><title>3. ion-app-flutter</title><link>https://pionion.org/frontend/ion-app-flutter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pionion.org/frontend/ion-app-flutter/</guid><description>Quick Start ☕️Running the grpc signaling server If you have a local golang environment already setup, simply run
go build ./cmd/signal/grpc/main.go &amp;amp;&amp;amp; ./main -c config.toml If you prefer a containerized environment, you can use the included Docker image
docker run -p 50051:50051 -p 5000-5020:5000-5020/udp pionwebrtc/ion-sfu:latest-grpc</description></item><item><title>3. ion-sfu</title><link>https://pionion.org/backend/sfu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pionion.org/backend/sfu/</guid><description>☕️How to use 1. Build and run by docker 1. run Nats docker pull nats docker run -p 4222:4222 -p 6222:6222 -p 8222:8222 nats check nats and redis is running
lsof -i:4222 2. build ion-sfu docker build -f ./docker/sfu.Dockerfile -t pionwebrtc/ion:latest-sfu . 3. run ion-sfu docker run -p 5000-5200:5000-5200/udp -p 6062:6062/tcp --network host -v $PWD/configs/sfu.toml:/configs/sfu.toml pionwebrtc/ion:latest-sfu 2. Build and run with source code tips:
script support ubuntu/mac/centos, you can build|start them yourself if you are using windows or IDE script will start a daemon, save pid to .</description></item><item><title>4. ion-app-web</title><link>https://pionion.org/frontend/ion-app-web/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pionion.org/frontend/ion-app-web/</guid><description>Quick Start ☕️Running the grpc signaling server If you have a local golang environment already setup, simply run
go build ./cmd/signal/grpc/main.go &amp;amp;&amp;amp; ./main -c config.toml If you prefer a containerized environment, you can use the included Docker image
docker run -p 50051:50051 -p 5000-5020:5000-5020/udp pionwebrtc/ion-sfu:latest-grpc</description></item><item><title>4. ion-avp</title><link>https://pionion.org/backend/avp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pionion.org/backend/avp/</guid><description>☕️How to use 1. Build and run by docker 1. run Nats docker pull nats docker run -p 4222:4222 -p 6222:6222 -p 8222:8222 nats check nats is running
lsof -i:4222 2. build ion-avp docker build -f ./docker/avp.Dockerfile -t pionwebrtc/ion:latest-avp . 3. run ion-avp docker run -p -p 6063:6063/tcp --network host -v $PWD/configs/avp.toml:/configs/avp.toml pionwebrtc/ion:latest-avp 2. Build and run with source code tips:
script support ubuntu/mac/centos, you can build|start them yourself if you are using windows or IDE script will start a daemon, save pid to .</description></item></channel></rss>